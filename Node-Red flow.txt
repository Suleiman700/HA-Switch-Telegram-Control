[{"id":"a338baef127fe805","type":"tab","label":"Flow 2","disabled":false,"info":"","env":[]},{"id":"dd2530d8a770e0d3","type":"telegram receiver","z":"a338baef127fe805","name":"","bot":"d0fedae2c4a957f6","saveDataDir":"","filterCommands":false,"x":170,"y":220,"wires":[["767a14292121c04b"],[]]},{"id":"767a14292121c04b","type":"http request","z":"a338baef127fe805","name":"","method":"GET","ret":"txt","paytoqs":"query","url":"http://192.168.50.121:3008/convert","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":190,"y":300,"wires":[["f9f94417c7ec48f5"]]},{"id":"f9f94417c7ec48f5","type":"switch","z":"a338baef127fe805","name":"Check if found 'Turn' keyword","property":"payload.content","propertyType":"msg","rules":[{"t":"regex","v":"(turn on|turn off)","vt":"str","case":false},{"t":"else"}],"checkall":"false","repair":false,"outputs":2,"x":440,"y":300,"wires":[["ab9be7a366b47835"],["13d138267d50c139"]]},{"id":"13d138267d50c139","type":"function","z":"a338baef127fe805","name":"Error if phrase doesn't include turn on / off","func":"\nconst msgForUser = `\n    Keyword not supported\n    Please include 'turn on / turn off' in your phrase\n`\nconst trimmedMessage = msgForUser\n    .split('\\n')\n    .map(line => line.trimStart())\n    .join('\\n');\n\n\nmsg.payload = {\n    chatId: msg.originalMessage.chat.id,\n    type: \"message\",\n    content: `\n        ${trimmedMessage}\n    `,\n    options: {\n        // reply_to_message_id: msg.originalMessage.message_id,\n        message_thread_id: msg.originalMessage.message_thread_id\n    }\n};\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":780,"y":300,"wires":[["34248bb53b7211c8"]]},{"id":"34248bb53b7211c8","type":"telegram sender","z":"a338baef127fe805","name":"","bot":"d0fedae2c4a957f6","haserroroutput":false,"outputs":1,"x":1070,"y":440,"wires":[[]]},{"id":"ab9be7a366b47835","type":"function","z":"a338baef127fe805","name":"Process user text","func":"const sttResult = msg.payload;\nconst extractedText = sttResult.content.toLowerCase(); // Ensure extracted text is lowercase for matching\n\n// Define a dictionary of trigger words and their corresponding entities\nconst entitiesDict = [\n    // Living room\n    {\n        trigger_words: ['living room', 'living room light'], // Phrase to say\n        entities: ['switch.x1', 'switch.x2'], // Targeted entities\n    },\n];\n\n// Function to find the first matching entities\nconst findFirstMatchingEntities = (text, entities) => {\n    for (let entity of entities) {\n        for (let trigger of entity.trigger_words) {\n            if (text.includes(trigger)) {\n                return entity.entities; // Return the first found matching entities\n            }\n        }\n    }\n    return []; // Return an empty array if no matches are found\n};\n\n// Determine action based on extracted text\nlet service = 'turn_off'; // Default action\nif (extractedText.includes('turn on')) {\n    service = 'turn_on';\n}\nelse if (extractedText.includes('turn off')) {\n    service = 'turn_off';\n}\n\n// Find matching entities\nconst matchedEntities = findFirstMatchingEntities(extractedText, entitiesDict);\n\n\nconst action = {\n    domain: 'switch',\n    service: service,\n    entities: matchedEntities\n}\n\nmsg.payload = {\n    domain: action.domain,\n    service: action.service,\n    entities: action.entities,\n    sttResult,\n};\n\nreturn [msg];","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":400,"wires":[["49c11d5a38b6c989","1ae4dde4b22981ec"]]},{"id":"49c11d5a38b6c989","type":"api-call-service","z":"a338baef127fe805","name":"","server":"d1609387.5ccbf","version":5,"debugenabled":false,"domain":"{{payload.domain}}","service":"{{payload.service}}","areaId":[],"deviceId":[],"entityId":["{{payload.entities}}"],"data":"","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":470,"y":520,"wires":[[]]},{"id":"1ae4dde4b22981ec","type":"function","z":"a338baef127fe805","name":"Tell user how many affected entities / no entities found","func":"\nlet msgForUser = ''\n\nif (msg.payload.entities.length) {\n    msgForUser = `\n        Done, ${msg.payload.entities.length} entities affected\n    `\n}\nelse {\n    msgForUser = `\n        Error, No entities found by that phrase\n    `\n}\nconst trimmedMessage = msgForUser\n    .split('\\n')\n    .map(line => line.trimStart())\n    .join('\\n');\n\n\nmsg.payload = {\n    chatId: msg.originalMessage.chat.id,\n    type: \"message\",\n    content: `\n        ${trimmedMessage}\n    `,\n    options: {\n        // reply_to_message_id: msg.originalMessage.message_id,\n        message_thread_id: msg.originalMessage.message_thread_id\n    }\n};\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":460,"wires":[["34248bb53b7211c8"]]},{"id":"d0fedae2c4a957f6","type":"telegram bot","botname":"ha700_telegram_bot","usernames":"xsuleimanx","chatids":"2137448520","baseapiurl":"","updatemode":"polling","pollinterval":"300","usesocks":false,"sockshost":"","socksprotocol":"socks5","socksport":"6667","socksusername":"anonymous","sockspassword":"","bothost":"","botpath":"","localbotport":"8443","publicbotport":"8443","privatekey":"","certificate":"","useselfsignedcertificate":false,"sslterminated":false,"verboselogging":false},{"id":"d1609387.5ccbf","type":"server","name":"Home Assistant","addon":true}]